the script is a fragment based conversion of CG representation into atomistic.

The script has 3 outputs:

The 1st requires no information other than the fragment corresponding to the bead
The script will convert any protein using a basic de novo method of fragment alignment to the CG beads.

The 2nd maps a users supplied atomistic structure onto the the CG representation. 
The mapped structure is then steered for a very short period to fit the CG coordinates.
Note:
This now works for incomplete user input files and will write a hybrid system between de novo and user supplied.

The 3rd just does a rigid body fit on the backbone.
There is no alchembed run on this system as you can use it as a restraint file and pull the steered coordinates into the rigid fit.

This can be done by:
add "define = -DPOSRES" to the MDP file applies restraints to all heavy atoms
gmx grompp -f md.mdp -c final_cg2at_at_rep_user_supplied.pdb -r final_cg2at_no_steered.pdb -p topol_final.top -o rigid_fit.tpr
gmx mdrun -v -deffnm rigid_fit

############################################################################

Available fragments

Charmm36
________

Non protein
-----------
SOL: 'tip3p', 'tip4p', 'spc', 'spce'
PC:  'POPC', 'DGPC', 'DLPC', 'DNPC', 'DOPC', 'DPPC', 'DRPC', 'DYPC'
PE:  'POPE', 'DGPE', 'DLPE', 'DNPE', 'DOPE', 'DPPE', 'DYPE'
PG:  'POPG'
PA:  'POPA'
PI:  'PIP2'
Sterols: 'CHOL'
Lipopolysaccharides: 'LIPA'
Cardiolipin: 'CARD' (PVCL2) 

Protein
-------
all amino acids

diacyl (CYSD) and triacyl (CYST) cysteine

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

Amber99sb
_________

Protein
-------
All amino acids

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

lipid-14
________

Non protein
-----------
Currently empty




-----------------------------------------------------------------------------

Forcefields

amber14sb.ff
amber99sb-ildn.ff
charmm36-mar2019.ff
charmm36-jul2017-updated.ff
oplsaam.ff


#############################################################################

The following flags are available:
-c cg_input.pdb (can accept pdb/gro/tpr [required])
-a atomistic_input.pdb (can accept pdb/gro/tpr[optional])
-v (3 level verbosity -vvv) (use just -v to get the run times etc)
-clean (removes temp file after cg2at) (small amount of cleaning of directories)
-ter interactive terminal residue selection
-w choose your solvent, common choices are: tip3p, tip4p, spc and spce. This is optional
-ff choose your forcefield. This is optional
-fg choose your fragment libraries. This is optional


example input.

python cg2at.py -c cg_input.pdb -a atomistic_input.pdb -v -clean -w tip3p -fg martini_2-2_charmm36 -ff charmm36-jul2017-update

#############################################################################

Script overview

 Read in databases 
        |-> choose forcefield and fragments
                      |-> fetch available fragements and bonded information

 collate input files as pdb into INPUT directory 
                      |-> Read in CG input
 
 Build non protein atomistic system
                |-> align COM of fragments to bead
                                | If not SOL or ION
                                |-> rotate fragment to minimise distance between connecting atoms the connected beads 
                                |                                       |-> energy minimise each residue separately
                                |                                                         |-> merge all minimised residues 
                                |                                                                         |-> minimise merged residue type incase of any clashes 
                                | If ION or SOL
                                |-> Randomly rotate water around COM of water/ion bead
                                                         |-> concatonate water molecules in one pdb
                                                         |              |-> minimise all water molecules
                                                         |if ion
                                                         |-> separate ions into separate file (no need to do anything to them) 

Build de novo protein atomistic system
                |-> align COM of fragments to bead
                                |-> rotate fragment to minimise distance between connecting atoms the connected beads 
                                                                           |-> each chain is minimised separately
                                                                                               |-> merge all minimised chains
                                                                                                            |-> minimise merged chains incase of any clashes                             
Build user supplied protein atomistic system
                |-> align COM of user supplied protein chain to CG chain
                                         |-> fit backbone COMs of user supplied protein chain to CG backbone beads
                                                                        |-> each chain is minimised separately
                                                                                        |-> Run steered MD on selected atoms to fit the user supplied protein chain more accurately to the CG protein_mass

 Merge protein and non protein 
           |if de novo
           |-> minimise merged system
                        |-> copy to final directory 
           |if user supplied protein
           |-> run alchembed on each chain iteratively to prevent any stuck acyl tails 
                                            |-> copy to final directory
